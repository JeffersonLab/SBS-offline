bb.sh.nchan = 189

## Detector map, format:
## crate slot start_channel end_channel
#bb.sh.detmap = 
#   4     4     62    63  -1 # One Lecroy 1881M ADC
#   4     1     0     63  0 # One Lecroy 1881M
#   4     2     0     63  0 # One Lecroy 1881M 
#   4     3     0     63  0 # One Lecroy 1881M 
#   4     4     0     62  0 # One Lecroy 1881M 

## Optional channel map
#bb.sh.chanmap =  1  2  3  4  5  6  7  -1   8  9 10 11 12 13 14  -1
#		15 16 17 18 19 20 21  -1  22 23 24 25 26 27 28  -1
#		29 30 31 32 33 34 35  -1  36 37 38 39 40 41 42  -1
#		43 44 45 46 47 48 49  -1  50 51 52 53 54 55 56  -1
#		57 58 59 60 61 62 63  -1  64 65 66 67 68 69 70  -1
#		71 72 73 74 75 76 77  -1  78 79 80 81 82 83 84  -1
#		85 86 87 88 89 90 91  -1  92 93 94 95 96 97 98  -1
#		99 100 101 102 103 104 105  -1 106 107 108 109 110 111 112  -1
#		113 114 115 116 117 118 119  -1 120 121 122 123 124 125 126  -1
#		127 128 129 130 131 132 133  -1 134 135 136 137 138 139 140  -1
#		141 142 143 144 145 146 147  -1 148 149 150 151 152 153 154  -1
#		155 156 157 158 159 160 161  -1 162 163 164 165 166 167 168  -1
#		169 170 171 172 173 174 175  -1 176 177 178 179 180 181 182  -1
#		183 184 185 186 187 188 189  -1 -1 -1 -1 -1 -1 -1 -1  -1
# 		-1 -1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1  -1
# 		-1 -1 -1 -1 -1 -1 -1  -1 -1 -1 -1 -1 -1 -1 -1 

bb.sh.detmap = ##
#  6     20    2     2       -1 
  6     6     4     15       0
  6     7     0     15       0
  6     8     0     15       0
  6     9     0     15       0
  6     10     0     15       0
  6     13     0     15       0
  6     14     0     15       0
  6     15     0     15       0
  6     16     0     15       0
  6     17     0     15       0
  6     18     0     15       0
  6     19     0     15       0
  6     20     0     0        0

## Optional channel map
bb.sh.chanmap = 
0 7  14 21 28 35 42 49 56 63 70 77 84 91  98 105 112 119 126 133 140 147 154 161 168 175 182
1 8  15 22 29 36 43 50 57 64 71 78 85 92  99 106 113 120 127 134 141 148 155 162 169 176 183
2 9  16 23 30 37 44 51 58 65 72 79 86 93 100 107 114 121 128 135 142 149 156 163 170 177 184
3 10 17 24 31 38 45 52 59 66 73 80 87 94 101 108 115 122 129 136 143 150 157 164 171 178 185
4 11 18 25 32 39 46 53 60 67 74 81 88 95 102 109 116 123 130 137 144 151 158 165 172 179 186
5 12 19 26 33 40 47 54 61 68 75 82 89 96 103 110 117 124 131 138 145 152 159 166 173 180 187
6 13 20 27 34 41 48 55 62 69 76 83 90 97 104 111 118 125 132 139 146 153 160 167 174 181 188

## Positions in [m] where +z is roated by bb.theta
## BB SH front: 1.89215 m + most probable shower depth 0.065 cm 
bb.sh.position = 0 0 1.95715 

## Size
bb.sh.size   =  0.595 2.295 0.37 # in meters

## Number of rows and columns
bb.sh.ncols =  7
bb.sh.nrows = 27

## Position of first module
bb.sh.xyz    =   1.105 0.255  0.000
## Space between modules
bb.sh.dxdydz =   0.085  .085  0.000

## Mininum energy  for a cluster center (not really used right now)
bb.sh.emin  = 0.0
## adc channels to mV assume F250 set fot 2V for 4096
bb.sh.adc.conv = 0.4882
# Threshold for pulse finding in waveform (mV)
bb.sh.adc.thres = 5.0
# Number of bins (bin=4ns) at the beginning of waveform used to determing average Pedestal
bb.sh.adc.NPedBin = 4
# Number of bins (bin=4ns) before Threshold Bin to use in integrating pulse
bb.sh.adc.NSB = 3
# Number of bins (bin=4ns) before Threshold Bin to use in integrating pulse
bb.sh.adc.NSA = 10
# Number of bin for fixed Threshold if no Threshold Crossing is found
bb.sh.adc.FixThresBin = 14
# Convert adc integral in pC to GeV
#bb.sh.adc.gain = 1.0
bb.sh.adc.gain = 
     0.1297
    0.05171
      0.146
     0.1483
    0.02599
     0.2883
    0.08753
    0.07917
    0.01316
   0.002436
     0.2223
     0.2164
     0.1695
     0.3728
     0.1523
    0.02913
     0.1234
    0.01153
     0.2218
   0.006306
    0.01717
    0.05125
   0.005834
    0.01761
    0.01462
    0.05265
    0.01894
    0.02441
    0.03873
    0.03638
    0.03318
    0.03577
    0.02735
    0.02849
    0.03802
    0.03568
    0.03087
    0.03102
    0.03386
    0.03203
    0.03604
    0.03914
    0.03481
    0.03225
    0.03287
    0.03032
    0.03253
     0.0312
    0.03476
    0.03386
    0.03105
    0.03229
    0.03264
    0.03087
    0.03034
    0.03466
    0.03717
    0.03226
    0.03256
    0.03059
    0.03065
     0.0314
    0.03476
     0.0367
    0.03239
    0.03246
    0.03239
    0.03195
    0.03197
    0.03555
    0.03678
    0.03362
    0.03481
    0.03263
    0.03304
    0.03274
    0.03749
    0.03533
    0.03341
    0.03201
    0.03236
    0.03264
    0.03224
    0.03568
    0.03483
     0.0333
    0.03429
    0.03354
    0.03056
    0.03213
    0.03609
    0.03794
    0.03313
    0.03518
    0.03338
    0.03275
    0.03298
    0.03503
    0.03624
    0.03301
    0.03253
    0.03325
    0.03418
    0.03539
    0.03608
    0.03533
    0.03428
    0.03425
    0.03426
    0.03523
    0.03497
    0.03793
    0.03706
    0.03528
    0.03665
    0.03643
    0.03336
     0.0337
    0.03493
    0.03721
    0.03485
    0.03378
    0.03292
    0.03421
    0.03421
    0.03813
    0.03629
    0.03456
    0.03508
    0.03443
    0.03317
    0.03454
    0.03263
    0.03712
    0.03369
    0.03316
    0.03461
    0.03441
    0.03462
    0.03731
    0.03634
    0.03351
    0.03601
    0.03458
    0.03362
    0.03562
    0.03845
    0.03705
    0.03606
    0.03355
    0.03538
    0.03617
    0.03662
    0.03592
     0.0369
    0.03399
    0.03418
     0.0352
    0.03552
    0.03524
    0.03778
    0.03348
    0.03564
    0.03487
    0.03489
    0.03494
    0.03499
    0.03731
    0.03487
    0.03245
    0.03522
     0.0344
    0.03578
    0.03595
    0.03405
    0.03431
    0.03765
    0.03448
    0.03211
    0.03577
    0.03625
    0.03586
    0.03422
    0.03479
    0.03779
    0.03846
    0.03754
    0.03747
    0.03359
